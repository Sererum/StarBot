from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from lesson import Lesson, LessonType
import os

class UserSender:
    def __init__(self, update: Update, context: CallbackContext):
        self.update = update
        self.context = context
        self.WEEKDAYS_RU = {
            0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            1: "–≤—Ç–æ—Ä–Ω–∏–∫",
            2: "—Å—Ä–µ–¥–∞",
            3: "—á–µ—Ç–≤–µ—Ä–≥",
            4: "–ø—è—Ç–Ω–∏—Ü–∞",
            5: "—Å—É–±–±–æ—Ç–∞",
            6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

    async def _send_message(self, text: str, keyboard: list = None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await self.update.message.reply_text(
            text=text,
            reply_markup=reply_markup
        )

    async def _send_photo(self, text: str, photo_path: str, keyboard: list = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"""
        if not os.path.exists(photo_path):
            await self._send_message(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!\n{text}", keyboard)
            return

        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        with open(photo_path, 'rb') as photo:
            await self.update.message.reply_photo(
                photo=photo,
                caption=text,
                reply_markup=reply_markup
            )

    async def show_schedule(self, lessons: list[Lesson], header: str):
        if not lessons:
            await self._send_message(f"{header}–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")  # –î–æ–±–∞–≤–ª–µ–Ω await
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = header
        keyboard = []
        lessons_by_date = {}

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        for lesson in sorted(lessons, key=lambda l: (l.date, l.time)):
            date_obj = datetime.strptime(lesson.date, "%Y.%m.%d")
            date_str = date_obj.strftime("%d.%m")
            weekday = self.WEEKDAYS_RU[date_obj.weekday()]
            
            if date_str not in lessons_by_date:
                lessons_by_date[date_str] = {
                    'weekday': weekday,
                    'lessons': []
                }
            lessons_by_date[date_str]['lessons'].append(lesson)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for date_str in sorted(lessons_by_date.keys()):
            date_info = lessons_by_date[date_str]
            sep = "‚Äï" * 14 
            message += f"\n{sep}\n{date_str} ({date_info['weekday']})\n{sep}\n"
            
            for lesson in date_info['lessons']:
                message += (
                    f"{lesson.time} \t{lesson.title}\n"
                    f"\t\t\t\t\t\t\t\t\t\t\t\t{lesson.lesson_type.value}\n\n"
                )
                
                if lesson.has_hw:
                    keyboard.append([InlineKeyboardButton(
                        text=f"–î–ó: {lesson.title}",
                        callback_data=f"hw_{lesson.id}"
                    )])

        await self._send_message(message, keyboard)

    async def show_homework(self, lesson: Lesson):
        """–ü–æ–∫–∞–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
        if not lesson or not lesson.has_hw:
            await self._send_message("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"üìö –î–ó –ø–æ {lesson.title}\n\n"
            f"üìÉ –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{lesson.hw_text}\n\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {lesson.date} {lesson.time}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        if lesson.has_file and lesson.file_path:
            file_ext = lesson.file_path.split('.')[-1].lower()
            
            try:
                with open(lesson.file_path, 'rb') as file:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                    if file_ext in ('jpg', 'jpeg', 'png'):
                        await self.update.message.reply_photo(
                            photo=file,
                            caption=text
                        )
                    elif file_ext in ('pdf', 'docx'):
                        await self.update.message.reply_document(
                            document=file,
                            caption=text
                        )
                    else:
                        await self._send_message(f"{text}\n\n‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            except FileNotFoundError:
                await self._send_message(f"{text}\n\n‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await self._send_message(text)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    async def show_schedule_today(self):
        today = datetime.today()
        lessons = [
            Lesson("–¢–µ–æ—Ä–∏—è –≥—Ä–∞—Ñ–æ–≤", LessonType.LECT, today.strftime("%Y.%m.%d"), "14:00", True),
            Lesson("–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", LessonType.PRACT, today.strftime("%Y.%m.%d"), "12:00")
        ]
        await self.show_schedule(lessons, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n")

    async def show_schedule_tomorrow(self):
        tomorrow = datetime.today() + timedelta(days=1)
        lessons = [
            Lesson("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", LessonType.LAB, tomorrow.strftime("%Y.%m.%d"), "10:00"),
            Lesson("–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", LessonType.LECT, tomorrow.strftime("%Y.%m.%d"), "16:00", True)
        ]
        await self.show_schedule(lessons, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n")

    async def show_schedule_week(self):
        today = datetime.today()
        start_week = today - timedelta(days=today.weekday())
        lessons = [
            Lesson("–ê–ª–≥–µ–±—Ä–∞", LessonType.LECT, (start_week + timedelta(days=0)).strftime("%Y.%m.%d"), "10:00", True),
            Lesson("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", LessonType.LAB, tomorrow.strftime("%Y.%m.%d"), "10:00"),
            Lesson("–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", LessonType.LECT, tomorrow.strftime("%Y.%m.%d"), "16:00", True)
        ]
        start_str, end_str = self._get_week_range(start_week)
        await self.show_schedule(lessons, f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ({start_str} - {end_str}):\n")

    async def show_schedule_next_week(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
        today = datetime.today()
        start_week = today - timedelta(days=today.weekday())
        start_next_week = start_week + timedelta(weeks=1)
        
        lessons = [
            Lesson("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", LessonType.LECT, 
                  (start_next_week + timedelta(days=1)).strftime("%Y.%m.%d"), "12:00", True),
            Lesson("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", LessonType.PRACT, 
                  (start_next_week + timedelta(days=1)).strftime("%Y.%m.%d"), "14:00"),
            Lesson("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", LessonType.LECT, 
                  (start_next_week + timedelta(days=3)).strftime("%Y.%m.%d"), "10:00", True),
            Lesson("–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", LessonType.LAB, 
                  (start_next_week + timedelta(days=4)).strftime("%Y.%m.%d"), "13:00")
        ]
        
        start_str, end_str = self._get_week_range(start_next_week)
        await self.show_schedule(lessons, f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ({start_str} - {end_str}):\n")

    async def show_hw_week(self):
        lessons = [
            Lesson(
                title="–¢–µ–æ—Ä–∏—è –≥—Ä–∞—Ñ–æ–≤",
                lesson_type=LessonType.LECT,
                date=(start_week + timedelta(days=0)).strftime("%Y.%m.%d"),
                time_str="14:00",
                has_hw=True,
                hw_text="–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-5 –∏–∑ —É—á–µ–±–Ω–∏–∫–∞, —Å—Ç—Ä. 45",
                has_file=True,
                file_path="files/graph_theory_hw.pdf"
            ),
            Lesson(
                title="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                lesson_type=LessonType.PRACT,
                date=(start_week + timedelta(days=2)).strftime("%Y.%m.%d"),
                time_str="12:00",
                has_hw=True,
                hw_text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º",
                has_file=False
            )
        ]

    async def show_hw_week(self):
        """–î–ó –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–º–µ—Ä—ã)"""
        today = datetime.today()
        start_week = today - timedelta(days=today.weekday())
        
        lessons = [
            Lesson(
                title="–¢–µ–æ—Ä–∏—è –≥—Ä–∞—Ñ–æ–≤",
                lesson_type=LessonType.LECT,
                date=(start_week + timedelta(days=0)).strftime("%Y.%m.%d"),
                time_str="14:00",
                has_hw=True,
                hw_text="–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-5 –∏–∑ —É—á–µ–±–Ω–∏–∫–∞, —Å—Ç—Ä. 45",
                has_file=True,
                file_path="files/2.pdf"
            ),
            Lesson(
                title="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                lesson_type=LessonType.PRACT,
                date=(start_week + timedelta(days=2)).strftime("%Y.%m.%d"),
                time_str="12:00",
                has_hw=True,
                hw_text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º",
                has_file=False
            )
        ]
        
        hw_lessons = [lesson for lesson in lessons if lesson.has_hw]
        
        if not hw_lessons:
            await self._send_message("üìö –ù–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π")
            return

        await self._send_message("üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:")
        for lesson in hw_lessons:
            await self.show_homework(lesson)

    async def show_hw_next_week(self):
        """–î–ó –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–º–µ—Ä—ã)"""
        next_week_start = datetime.today() + timedelta(weeks=1)
        next_week_start -= timedelta(days=next_week_start.weekday())
        
        lessons = [
            Lesson(
                title="–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                lesson_type=LessonType.LAB,
                date=(next_week_start + timedelta(days=1)).strftime("%Y.%m.%d"),
                time_str="10:00",
                has_hw=True,
                hw_text="–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –ë–î –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞",
                has_file=True,
                file_path="files/1.jpg"
            ),
            Lesson(
                title="–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                lesson_type=LessonType.LECT,
                date=(next_week_start + timedelta(days=3)).strftime("%Y.%m.%d"),
                time_str="09:00",
                has_hw=True,
                hw_text="–†–µ—à–∏—Ç—å –ø—Ä–µ–¥–µ–ª—ã: ‚Ññ 15.3, 15.7, 15.9",
                has_file=False
            )
        ]
        
        hw_lessons = [lesson for lesson in lessons if lesson.has_hw]
        
        if not hw_lessons:
            await self._send_message("üìö –ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π")
            return

        await self._send_message("üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:")
        for lesson in hw_lessons:
            await self.show_homework(lesson)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    @staticmethod
    def _get_week_range(start_date: datetime) -> (str, str):
        end_date = start_date + timedelta(days=6)
        return (
            start_date.strftime("%d.%m"),
            end_date.strftime("%d.%m")
        )
